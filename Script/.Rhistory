aes(x =Final.de.Semana ,y = Total) +
labs(title = "Consumo Médio de Cerveja") +
geom_col(width= 0.2,size = 1,color="darkblue",fill="white") +
theme(axis.text.x = element_text(angle=65, vjust=0.6),
#Centralizar o título
plot.title = element_text(hjust = 0.5),
#Tirar o título do eixo x
axis.title.x=element_blank(),
# Tirar o título do eixo y
axis.title.y=element_blank()
)
library(MASS) #Pacote para a Análise de Regressão (modelagem linear)
library(lmtest) #Pacote de Testes
library(car)#Pacote realizar teste de multicolinearidade
library(forecast)#Pacote para utilizar função Box.Cox
df <- df %>% dplyr::rename(
dia = Data,
temp_med = `Temperatura Media (C)`,
temp_min = `Temperatura Minima (C)`,
temp_max = `Temperatura Maxima (C)`,
precip = `Precipitacao (mm)`,
fds = `Final de Semana`,
consumo = `Consumo de cerveja (litros)`
)
View(df)
df <- df %>% dplyr::rename(
dia = Data,
temp_med = `Temperatura.Media..C.`,
temp_min = `Temperatura.Minima..C.`,
temp_max = `Temperatura.Maxima..C.`,
precip = `Precipitacao..mm.`,
fds = `Final.de.Semana`,
consumo = `Consumo.de.cerveja..litros.`
)
lm = modelo1=lm(consumo~ temp_med+temp_min+temp_max+precip+fds,
data = df)
modelo1
modelo1=lm(consumo~ temp_med+temp_min+temp_max+precip+fds,
data = df)
summary(modelo1)
modelo2=lm(consumo~ temp_med+temp_max+precip+fds,
data = df)
summary(modelo2)
modelo3=lm(consumo~temp_max+precip+fds,
data = df)
summary(modelo2)
modelo3=lm(consumo~temp_max+precip+fds,
data = df)
summary(modelo3)
#Análise Grafica de Residuos
par(mfrow=c(2,2))
plot(modelo3,which = c(1:4),pch=20)
#Análise Grafica de Residuos
par(mfrow=c(2,2))
plot(modelo2,which = c(1:4),pch=20)
modelo2=lm(consumo~temp_max+precip+fds,
data = df)
options(knitr.duplicate.label = "allow")
df = read.csv("https://raw.githubusercontent.com/alexdesousapereira/Analise-do-Consumo-de-Bebida-Alcoolica/main/Dados/consumo_cerveja.csv",sep = ";")
dim(df)
head(df)
str(df)
data_cor <- sub('2019','2015',df$Data)
data_cor <- sub('/','-',data_cor)
data_cor <- sub('/','-',data_cor)
df$Data <- data_cor
df$Temperatura.Maxima..C. =  df$Temperatura.Maxima..C. %>% str_replace('[,]', '.')%>% as.double()
df$Temperatura.Maxima..C. =  df$Temperatura.Maxima..C. %>% str_replace('[,]', '.')%>% as.double()
# Carregando os pacotes
library(dplyr) # Manipulação de dados
library(stringr) # manipulação de strings
library(lubridate) # manipulação de datas
options(knitr.duplicate.label = "allow")
df = read.csv("https://raw.githubusercontent.com/alexdesousapereira/Analise-do-Consumo-de-Bebida-Alcoolica/main/Dados/consumo_cerveja.csv",sep = ";")
dim(df)
head(df)
str(df)
data_cor <- sub('2019','2015',df$Data)
data_cor <- sub('/','-',data_cor)
data_cor <- sub('/','-',data_cor)
df$Data <- data_cor
df$Temperatura.Maxima..C. =  df$Temperatura.Maxima..C. %>% str_replace('[,]', '.')%>% as.double()
df$Temperatura.Media..C. = df$Temperatura.Media..C. %>% str_replace('[,]', '.') %>% as.double()
df$Temperatura.Minima..C. = df$Temperatura.Minima..C. %>% str_replace('[,]', '.') %>% as.double()
df$Precipitacao..mm. = df$Precipitacao..mm. %>% str_replace('[,]', '.') %>% as.double()
df[is.na(df$Temperatura.Maxima..C.),]$Temperatura.Maxima..C. = median(df$Temperatura.Maxima..C.,na.rm = T)
df[is.na(df$Temperatura.Minima..C.),]$Temperatura.Minima..C. = median(df$Temperatura.Minima..C.,na.rm = T)
df[is.na(df$Temperatura.Media..C.),]$Temperatura.Media..C. = median(df$Temperatura.Media..C.,na.rm = T)
df[!complete.cases(df),] # Verificando se ainda existem valores nulos no dataset
#Convertendo coluna Final de Semana
# Vamos Converter algumas variáveis agora
df$Final.de.Semana = cut(df$Final.de.Semana,
c(-1,0,1),
labels = c("Dia de Semana","Fim de Semana"))
# Criando coluna Dia da Semana
df$Dia.da.Semana = c(seq(1:length(df$Data)))
for (i in 1:length(df$Dia.da.Semana)){
df$Dia.da.Semana[i] = wday(df$Data[i])
}
df$Dia.da.Semana= cut(df$Dia.da.Semana,
c(0,1,2,3,4,5,6,7),
labels = c("Domingo",
"Segunda",
"Terça",
"Quarta",
"Quinta",
"Sexta",
"Sábado"))
# Criando coluna Mês
df$Mes = c(seq(1:length(df$Data)))
for (i in 1:length(df$Data)){
df$Mes[i] = month(df$Data[i])
}
df$Mes= cut(df$Mes,
c(0,1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Janeiro",
"Fevereiro",
"Março",
"Abril",
"Maio",
"Junho",
"Julho",
"Agosto",
"Setembro",
"Outubro",
"Novembro",
"Dezembro"))
# Carregando os pacotes
library(ggplot2) # Criação de gráficos
library(ggcorrplot) # criação do gráfico de correlação
df_corr = select_if(df,is.numeric) %>% cor() %>% round(2)
ggcorrplot(df_corr,type = "lower", # Retira o espelho da matriz
hc.order = T, # organiza os valores
method = "circle", # formato dos componentes da matriz
lab = TRUE, # adicionar os valores das correlações
lab_size = 2,# Tamamho dos Valores
colors = c("firebrick", "white","blue"), # cores do gráfico
title = "Matriz de Correlação"
)
ggplot(df) +
aes(x = Dia.da.Semana,y = Consumo.de.cerveja..litros.,col = Dia.da.Semana) +
labs(x = "Dia da Semana",
y = "Consumo de Cerveja",
title = "Consumo de Cerveja na Semana") +
theme(axis.text.x = element_text(angle=65, vjust=0.6),
# Centralizar o título
plot.title = element_text(hjust = 0.5),
#Tirar o título do eixo x
axis.title.x=element_blank(),
#Tirar o título do eixo y
axis.title.y=element_blank()) +
geom_boxplot()
# Consumo de Cerveja por mês
ggplot(df) +
aes(x = Mes,y = Consumo.de.cerveja..litros.) +
labs(x = "Mês",
y = "Consumo de Cerveja",
title = "Consumo de Cerveja no Mês") +
geom_col(stat="identity", width = 0.5, fill="tomato2") +
theme(axis.text.x = element_text(angle=65, vjust=0.6),
# Centralizar o título
plot.title = element_text(hjust = 0.5),
#Tirar o título do eixo x
axis.title.x=element_blank(),
#Tirar o título do eixo y
axis.title.y=element_blank()) +
ylim(limits= c(0,100000)) +
coord_flip()
library(MASS) #Pacote para a Análise de Regressão (modelagem linear)
library(lmtest) #Pacote de Testes
library(car)#Pacote realizar teste de multicolinearidade
library(forecast)#Pacote para utilizar função Box.Cox
df <- df %>% dplyr::rename(
dia = Data,
temp_med = `Temperatura.Media..C.`,
temp_min = `Temperatura.Minima..C.`,
temp_max = `Temperatura.Maxima..C.`,
precip = `Precipitacao..mm.`,
fds = `Final.de.Semana`,
consumo = `Consumo.de.cerveja..litros.`
)
modelo1=lm(consumo~ temp_med+temp_min+temp_max+precip+fds,
data = df)
summary(modelo1)
modelo2=lm(consumo~temp_max+precip+fds,
data = df)
summary(modelo2)
#Análise Grafica de Residuos
par(mfrow=c(2,2))
plot(modelo2,which = c(1:4),pch=20)
#Análise de Normalidade
shapiro.test(modelo2$residuals)
#Análise de Normalidade
shapiro.test(modelo2$residuals)
#Análise de Normalidade
shapiro.test(modelo2$residuals)
summary(rstandard(modelo2))
Box.test(modelo2$residuals, type = c("Ljung-Box"))
summary(rstandard(modelo2))
bptest(modelo2)
durbinWatsonTest(modelo2)
vif(modelo2)
```{r range}
```{r range}
```{r range}
range(df$temp_min)
range(df$temp_med)
range(df$temp_max)
vif(modelo2)
lambda=BoxCox.lambda(modelo2$residuals)
Y = df$consumo
Y =((Y^lambda)-1)/lambda
modelo3=lm(Y~temp_max+precip+fds,
data = df)
summary(modelo3)
#Análise Grafica de Residuos
par(mfrow=c(2,2))
plot(modelo2,which = c(1:4),pch=20)
#Análise Grafica de Residuos
par(mfrow=c(2,2))
plot(modelo3,which = c(1:4),pch=20)
#Análise de Normalidade
shapiro.test(modelo2$residuals)
#Análise de Normalidade
shapiro.test(modelo3$residuals)
modelo3=lm(Y~temp_max+precip+fds,
data = df)
summary(modelo3$residuals)
#Análise de Normalidade
shapiro.test(modelo3$residuals)
library(forecast)
lambda<- BoxCox.lambda(df$consumo,
method = c("loglik"),
lower=-5,
upper=5)
lambda
Y <- BoxCox(df$consumo, lambda)
modelo3=lm(Y~temp_max+precip+fds,
data = df)
summary(modelo3)
boxcox(modelo2, plotit=T, lam=seq(-1, 1, 1/10))
library(MASS) #Pacote para a Análise de Regressão (modelagem linear)
library(lmtest) #Pacote de Testes
library(car)#Pacote realizar teste de multicolinearidade
library(forecast)#Pacote para utilizar função Box.Cox
boxcox(modelo2, plotit=T, lam=seq(-1, 1, 1/10))
# Carregando os pacotes
library(dplyr) # Manipulação de dados
library(stringr) # manipulação de strings
library(lubridate) # manipulação de datas
options(knitr.duplicate.label = "allow")
df = read.csv("https://raw.githubusercontent.com/alexdesousapereira/Analise-do-Consumo-de-Bebida-Alcoolica/main/Dados/consumo_cerveja.csv",sep = ";")
dim(df)
head(df)
str(df)
data_cor <- sub('2019','2015',df$Data)
data_cor <- sub('/','-',data_cor)
data_cor <- sub('/','-',data_cor)
df$Data <- data_cor
df$Temperatura.Maxima..C. =  df$Temperatura.Maxima..C. %>% str_replace('[,]', '.')%>% as.double()
df$Temperatura.Media..C. = df$Temperatura.Media..C. %>% str_replace('[,]', '.') %>% as.double()
df$Temperatura.Minima..C. = df$Temperatura.Minima..C. %>% str_replace('[,]', '.') %>% as.double()
df$Precipitacao..mm. = df$Precipitacao..mm. %>% str_replace('[,]', '.') %>% as.double()
df[!complete.cases(df),] # Verifica valores nulos no dataset
df[is.na(df$Temperatura.Maxima..C.),]$Temperatura.Maxima..C. = median(df$Temperatura.Maxima..C.,na.rm = T)
df[is.na(df$Temperatura.Minima..C.),]$Temperatura.Minima..C. = median(df$Temperatura.Minima..C.,na.rm = T)
df[is.na(df$Temperatura.Media..C.),]$Temperatura.Media..C. = median(df$Temperatura.Media..C.,na.rm = T)
df[!complete.cases(df),] # Verificando se ainda existem valores nulos no dataset
#Convertendo coluna Final de Semana
# Vamos Converter algumas variáveis agora
df$Final.de.Semana = cut(df$Final.de.Semana,
c(-1,0,1),
labels = c("Dia de Semana","Fim de Semana"))
#Convertendo coluna Final de Semana
# Vamos Converter algumas variáveis agora
df$Final.de.Semana = cut(df$Final.de.Semana,
c(-1,0,1),
labels = c("Dia de Semana","Fim de Semana"))
#Convertendo coluna Final de Semana
# Vamos Converter algumas variáveis agora
df$Final.de.Semana = cut(df$Final.de.Semana,
c(-1,0,1),
labels = c("Dia de Semana","Fim de Semana"))
# Carregando os pacotes
library(dplyr) # Manipulação de dados
library(stringr) # manipulação de strings
library(lubridate) # manipulação de datas
options(knitr.duplicate.label = "allow")
df = read.csv("https://raw.githubusercontent.com/alexdesousapereira/Analise-do-Consumo-de-Bebida-Alcoolica/main/Dados/consumo_cerveja.csv",sep = ";")
dim(df)
head(df)
str(df)
data_cor <- sub('2019','2015',df$Data)
data_cor <- sub('/','-',data_cor)
data_cor <- sub('/','-',data_cor)
df$Data <- data_cor
df$Temperatura.Maxima..C. =  df$Temperatura.Maxima..C. %>% str_replace('[,]', '.')%>% as.double()
df$Temperatura.Media..C. = df$Temperatura.Media..C. %>% str_replace('[,]', '.') %>% as.double()
df$Temperatura.Minima..C. = df$Temperatura.Minima..C. %>% str_replace('[,]', '.') %>% as.double()
df$Precipitacao..mm. = df$Precipitacao..mm. %>% str_replace('[,]', '.') %>% as.double()
df[!complete.cases(df),] # Verifica valores nulos no dataset
df[is.na(df$Temperatura.Maxima..C.),]$Temperatura.Maxima..C. = median(df$Temperatura.Maxima..C.,na.rm = T)
df[is.na(df$Temperatura.Minima..C.),]$Temperatura.Minima..C. = median(df$Temperatura.Minima..C.,na.rm = T)
df[is.na(df$Temperatura.Media..C.),]$Temperatura.Media..C. = median(df$Temperatura.Media..C.,na.rm = T)
df[!complete.cases(df),] # Verificando se ainda existem valores nulos no dataset
#Convertendo coluna Final de Semana
# Vamos Converter algumas variáveis agora
df$Final.de.Semana = cut(df$Final.de.Semana,
c(-1,0,1),
labels = c("Dia de Semana","Fim de Semana"))
# Criando coluna Dia da Semana
df$Dia.da.Semana = c(seq(1:length(df$Data)))
for (i in 1:length(df$Dia.da.Semana)){
df$Dia.da.Semana[i] = wday(df$Data[i])
}
df$Dia.da.Semana= cut(df$Dia.da.Semana,
c(0,1,2,3,4,5,6,7),
labels = c("Domingo",
"Segunda",
"Terça",
"Quarta",
"Quinta",
"Sexta",
"Sábado"))
# Criando coluna Mês
df$Mes = c(seq(1:length(df$Data)))
for (i in 1:length(df$Data)){
df$Mes[i] = month(df$Data[i])
}
df$Mes= cut(df$Mes,
c(0,1,2,3,4,5,6,7,8,9,10,11,12),
labels = c("Janeiro",
"Fevereiro",
"Março",
"Abril",
"Maio",
"Junho",
"Julho",
"Agosto",
"Setembro",
"Outubro",
"Novembro",
"Dezembro"))
# Carregando os pacotes
library(ggplot2) # Criação de gráficos
library(ggcorrplot) # criação do gráfico de correlação
df_corr = select_if(df,is.numeric) %>% cor() %>% round(2)
ggcorrplot(df_corr,type = "lower", # Retira o espelho da matriz
hc.order = T, # organiza os valores
method = "circle", # formato dos componentes da matriz
lab = TRUE, # adicionar os valores das correlações
lab_size = 2,# Tamamho dos Valores
colors = c("firebrick", "white","blue"), # cores do gráfico
title = "Matriz de Correlação"
)
ggplot(df) +
aes(x = Dia.da.Semana,y = Consumo.de.cerveja..litros.,col = Dia.da.Semana) +
labs(x = "Dia da Semana",
y = "Consumo de Cerveja",
title = "Consumo de Cerveja na Semana") +
theme(axis.text.x = element_text(angle=65, vjust=0.6),
# Centralizar o título
plot.title = element_text(hjust = 0.5),
#Tirar o título do eixo x
axis.title.x=element_blank(),
#Tirar o título do eixo y
axis.title.y=element_blank()) +
geom_boxplot()
# Consumo de Cerveja por mês
ggplot(df) +
aes(x = Mes,y = Consumo.de.cerveja..litros.) +
labs(x = "Mês",
y = "Consumo de Cerveja",
title = "Consumo de Cerveja no Mês") +
geom_col(stat="identity", width = 0.5, fill="tomato2") +
theme(axis.text.x = element_text(angle=65, vjust=0.6),
# Centralizar o título
plot.title = element_text(hjust = 0.5),
#Tirar o título do eixo x
axis.title.x=element_blank(),
#Tirar o título do eixo y
axis.title.y=element_blank()) +
ylim(limits= c(0,100000)) +
coord_flip()
# Consumo médio de cerveja no Dia de Semana e no Final de Semana
X = group_by(df,Final.de.Semana)%>%summarise(Total=mean(Consumo.de.cerveja..litros.))
ggplot(X) +
aes(x =Final.de.Semana ,y = Total) +
labs(title = "Consumo Médio de Cerveja") +
geom_col(width= 0.2,size = 1,color="darkblue",fill="white") +
theme(axis.text.x = element_text(angle=65, vjust=0.6),
#Centralizar o título
plot.title = element_text(hjust = 0.5),
#Tirar o título do eixo x
axis.title.x=element_blank(),
# Tirar o título do eixo y
axis.title.y=element_blank()
)
library(MASS) #Pacote para a Análise de Regressão (modelagem linear)
library(lmtest) #Pacote de Testes
library(car)#Pacote realizar teste de multicolinearidade
library(forecast)#Pacote para utilizar função Box.Cox
df <- df %>% dplyr::rename(
dia = Data,
temp_med = `Temperatura.Media..C.`,
temp_min = `Temperatura.Minima..C.`,
temp_max = `Temperatura.Maxima..C.`,
precip = `Precipitacao..mm.`,
fds = `Final.de.Semana`,
consumo = `Consumo.de.cerveja..litros.`
)
modelo1=lm(consumo~ temp_med+temp_min+temp_max+precip+fds,
data = df)
summary(modelo1)
modelo2=lm(consumo~temp_max+precip+fds,
data = df)
summary(modelo2)
#Análise Grafica de Residuos
par(mfrow=c(2,2))
plot(modelo2,which = c(1:4),pch=20)
#Análise de Normalidade
shapiro.test(modelo2$residuals)
summary(rstandard(modelo2))
bptest(modelo2)
durbinWatsonTest(modelo2)
vif(modelo2)
boxcox(modelo2, plotit=T, lam=seq(-1, 1, 1/10))
boxcox(modelo2, plotit=T, lam=seq(-1, 1, 1/10))
ambda<- BoxCox.lambda(modelo2$residuals,
method = c("loglik"),
lower=-5,
upper=5)
lambda<- BoxCox.lambda(modelo2$residuals,
method = c("loglik"),
lower=-5,
upper=5)
lambda<- BoxCox.lambda(modelo2$residuals,
method = c("loglik"),
lower=-10,
upper=10)
lambda<- BoxCox.lambda(modelo2$residuals)
lambda<- BoxCox.lambda(modelo2$residuals)
lambda
lambda<- BoxCox.lambda(modelo2$residuals)
lambda
Y <- BoxCox(df$consumo, lambda)
modelo3=lm(Y~temp_max+precip+fds,
data = df)
summary(modelo3)
#Análise de Normalidade
shapiro.test(modelo3$residuals)
lambda<- BoxCox.lambda(modelo2$residuals,  method = c("loglik"),
lower=-5,
upper=5)
lambda<- BoxCox.lambda(modelo2$residuals,  method = c("loglik"),
lower=-5,
upper=5)
lambda<- BoxCox.lambda(modelo2$residuals,  method = c("loglik"),
lower=-5,
upper=5)
par(mfrow=c(2,2))
boxcox(modelo2)
x <- modelo2
par(mfrow=c(2,2))
boxcox(x)
par(mfrow=c(2))
par(mfrow=c(2,2))
boxcox(modelo2$residuals)
boxcox(modelo2, plotit=T, lam=seq(-1, 1, 1/10))
lambda<- BoxCox.lambda(modelo2$residuals,  method = c("loglik"),
lower=-5,
upper=5)
lambda<- BoxCox.lambda(df$consumo,  method = c("loglik"),
lower=-5,
upper=5)
lambda
Y <- BoxCox(df$consumo, lambda)
lambda<- BoxCox.lambda(df$consumo,  method = c("loglik"),
lower=-5,
upper=5)
lambda
Y <- BoxCox(df$consumo, lambda)
modelo3=lm(Y~temp_max+precip+fds,
data = df)
summary(modelo3)
lambda<- BoxCox.lambda(modelo2,  method = c("loglik"),
lower=-5,
upper=5)
boxcox(modelo2, plotit=T, lam=seq(-1, 1, 1/10),data = df)
Y <- BoxCox(df$consumo, lambda)
boxcox(modelo2, plotit=T, lam=seq(-1, 1, 1/10),data = df)
lambda <- 0.45
Y <- BoxCox(df$consumo, lambda)
modelo3=lm(Y~temp_max+precip+fds,
data = df)
summary(modelo3)
#Análise de Normalidade
shapiro.test(modelo3$residuals)
modelo3=lm(Y~temp_max+precip+fds,
data = df)
summary(modelo3)
lambda<- BoxCox.lambda(modelo2,  method = c("loglik"),
lower=-5,
upper=5,
data = df)
lambda<- BoxCox.lambda(modelo2,  method = c("loglik"),
lower=-5,
upper=5)
lambda<- BoxCox.lambda(modelo2)
lambda<- BoxCox.lambda(modelo2)
lambda<- BoxCox.lambda(modelo2)
lambda<- BoxCox.lambda(modelo2)
